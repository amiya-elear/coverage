{"version":3,"sources":["gulpfile.babel.js"],"names":["gulp","babel","clean","jasmine","jshint","nodemon","gutil","task","log","stream","script","ext","ignore","tasks","on","console","error","emit","src","pipe","dest","read","reporter","watch","timeout","includeStackTrace","color"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;;AAEA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,WAAlB;;AAEA;AACAN,KAAKO,IAAL,CAAU,SAAV,EAAqB,CAAC,cAAD,CAArB,EAAuC,MAAM;AAC3CD,QAAME,GAAN,CAAU,sCAAV;AACD,CAFD;;AAIA;AACAR,KAAKO,IAAL,CAAU,cAAV,EAA0B,CAAC,OAAD,CAA1B,EAAqC,MAAM;AACzC,MAAIE,SAASJ,QAAQ;AACnBK,YAAQ,gBADW;AAEjBC,SAAK,SAFY;AAGjBC,YAAQ,CAAC,YAAD,CAHS;AAIjBC,WAAO,CAAC,OAAD,CAJU,EAAR,CAAb;;AAMAJ,SAAOK,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,YAAQP,GAAR,CAAY,YAAZ;AACD,GAFD,EAEGM,EAFH,CAEM,OAFN,EAEe,MAAM;AACnBC,YAAQC,KAAR,CAAc,4BAAd;AACAP,WAAOQ,IAAP,CAAY,SAAZ,EAAuB,EAAvB,EAFmB,CAEU;AAC9B,GALD;AAMD,CAbD;;AAeA;AACAjB,KAAKO,IAAL,CAAU,OAAV,EAAmB,CAAC,YAAD,CAAnB,EAAmC,MAAM;AACvCD,QAAME,GAAN,CAAU,0CAAV;AACD,CAFD;;AAIA;AACAR,KAAKO,IAAL,CAAU,YAAV,EAAwB,CAAC,OAAD,CAAxB,EAAmC,MAAM;AACvC,SAAOP,KAAKkB,GAAL,CAAS,gBAAT,EACKC,IADL,CACUlB,OADV,EAEKkB,IAFL,CAEUnB,KAAKoB,IAAL,CAAU,MAAV,CAFV,CAAP;AAGD,CAJD;;AAMA;AACApB,KAAKO,IAAL,CAAU,OAAV,EAAmB,MAAM;AACvB,SAAOP,KAAKkB,GAAL,CAAS,MAAT,EAAiB,EAACG,MAAM,KAAP,EAAjB,EACKF,IADL,CACUjB,OADV,CAAP;AAED,CAHD;;AAKA;AACAF,KAAKO,IAAL,CAAU,QAAV,EAAoB,MAAM;AACxB,SAAOP,KAAKkB,GAAL,CAAS,eAAT,EACKC,IADL,CACUf,QADV,EAEKe,IAFL,CAEUf,OAAOkB,QAAP,CAAgB,gBAAhB,CAFV,CAAP;AAGD,CAJD;;AAMA;AACAtB,KAAKO,IAAL,CAAU,OAAV,EAAmB,MAAM;AACvBP,OAAKuB,KAAL,CAAW,eAAX,EAA4B,CAAC,QAAD,CAA5B;AACD,CAFD;;AAIA;AACAvB,KAAKO,IAAL,CAAU,MAAV,EAAkB,CAAC,YAAD,CAAlB,EAAkC,MAAM;AACtC,SAAOP,KAAKkB,GAAL,CAAS,mBAAT,EACKC,IADL,CACUhB,QAAQ;AACZqB,aAAS,KADG;AAEZC,uBAAmB,IAFP;AAGZC,WAAO;AAHK,GAAR,CADV,CAAP;AAMD,CAPD;;AASA;AACA1B,KAAKO,IAAL,CAAU,YAAV,EAAwB,CAAC,OAAD,CAAxB,EAAmC,MAAM;AACvC,SAAOP,KAAKkB,GAAL,CAAS,cAAT,EACKC,IADL,CACUlB,OADV,EAEKkB,IAFL,CAEUnB,KAAKoB,IAAL,CAAU,WAAV,CAFV,CAAP;AAGD,CAJD","file":"gulpfile.babel.js","sourceRoot":"/home/amiyasantra/Desktop/Node/coverage","sourcesContent":["/*===============================================================================*/\n/*********************************************************************************/\n/**\n * @fileOverview gulp file for creating and executing gulp tasks\n * @author ABHISHEK SHARMA, abhisheks@elear.solutions\n * @copyright Copyright (c) 2017 Elear Solutions Tech Private Limited. All rights\n * reserved.\n * @license To any person (the \"Recipient\") obtaining a copy of this software and\n * associated documentation files (the \"Software\"):\n *\n * All information contained in or disclosed by this software is confidential\n * and proprietary information of Elear Solutions Tech Private Limited and all\n * rights therein are expressly reserved. By accepting this material the\n * recipient agrees that this material and the information contained therein is\n * held in confidence and in trust and will NOT be used, copied, modified,\n * merged, published, distributed, sublicensed, reproduced in whole or in part,\n * nor its contents revealed in any manner to others without the express\n * written permission of Elear Solutions Tech Private Limited.\n */\n/*********************************************************************************/\n/*===============================================================================*/\n\nimport gulp from 'gulp';\nimport babel from 'gulp-babel';\nimport clean from 'gulp-clean';\nimport jasmine from 'gulp-jasmine-node';\nimport jshint from 'gulp-jshint';\nimport nodemon from 'gulp-nodemon';\nimport gutil from 'gulp-util';\n\n// Default gulp task to build and run the server\ngulp.task('default', ['start:server'], () => {\n  gutil.log('Boilerplate Server is up and running');\n});\n\n// Gulp task for starting the server using nodemon\ngulp.task('start:server', ['build'], () => {\n  var stream = nodemon({\n    script: 'dist/server.js'\n    , ext: 'html js'\n    , ignore: ['ignored.js']\n    , tasks: ['watch']});\n\n  stream.on('restart', () => {\n    console.log('restarted!');\n  }).on('crash', () => {\n    console.error('Application has crashed!\\n');\n    stream.emit('restart', 10);  // restart the server in 10 seconds\n  });\n});\n\n// Gulp task for building the code into dist folder\ngulp.task('build', ['transpiler'], () => {\n  gutil.log('Building of Boilerplate Service Complete');\n})\n\n// Gulp task for transpiling all ES6 code to ES5 and copy to dist folder.\ngulp.task('transpiler', ['clean'], () => {\n  return gulp.src('server/**/*.js')\n             .pipe(babel())\n             .pipe(gulp.dest('dist'));\n});\n\n// Gulp task to clean the dist folder\ngulp.task('clean', () => {\n  return gulp.src('dist', {read: false})\n             .pipe(clean());\n});\n\n// Gulp task to configure the jshint\ngulp.task('jshint', () => {\n  return gulp.src('./src/**/*.js')\n             .pipe(jshint())\n             .pipe(jshint.reporter('jshint-stylish'));\n});\n\n// Gulp task to watch source files and run jshint on file changes\ngulp.task('watch', () => {\n  gulp.watch('./src/**/*.js', ['jshint']);\n});\n\n// Gulp task to run jasmine on the spec folder\ngulp.task('test', ['build:test'], () => {\n  return gulp.src('dist/spec/**/*.js')\n             .pipe(jasmine({\n               timeout: 10000,\n               includeStackTrace: true,\n               color: true\n             }));\n});\n\n// Gulp task for building the code into dist folder\ngulp.task('build:test', ['build'], () => {\n  return gulp.src('spec/**/*.js')\n             .pipe(babel())\n             .pipe(gulp.dest('dist/spec'));\n});\n\n"]}